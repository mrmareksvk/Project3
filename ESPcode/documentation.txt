TODO, DEBUG and stuff:
WIFI:
     WiFi.mode(WIFI_NONE_SLEEP)
     WiFi.setSleepMode(WIFI_NONE_SLEEP);
PROGRAM:
     TODO: Integrity check from function returns
     ARRAYS FOR KEEPING DATA
     last measurement checker
     dtostrf(floatvar, StringLengthIncDecimalPoint, numVarsAfterDecimal, charbuf);
     memcpy
     TODO  -  functions, check integrity from every function
     char *  itoa ( int value, char * str, int base );
     dtostrf() >
     http://www.nongnu.org/avr-libc/user-manual/group__avr__stdlib.html#ga060c998e77fb5fc0d3168b3ce8771d42

     http://www.cplusplus.com/reference/string/string/substr/


     printf()
     // final array,string "%d", value

     light > change to lux? - CHECK data sheet for LDR

     WiFi reconnect function

MQTT:
     MQTT topic for every sensor
     baaa/sensor???/vars (sens999 max)  (19+1(delim) chars)
     vars = {temp,hum,lux,lat,lon,date,time}

     MAYBE
     - move mqtt server ip + port to definition so everything is on one place

     int publish (topic, payload) {const char[]; const char[]}
     int publish (topic, payload, length) {const char[]; byte[]; byte}
     int publish (topic, payload, retained) {const char[]; const char[]; bool}

     MAYBE TODO
     - implement MQTT disconnect so we dont generate pings

     To get TinyGPS++ to work, you have to repeatedly funnel the characters to it from the GPS module using the encode() method.

DEBUG:
     possible issue 1 :
     if root topic or device name is changed it might cause overflow
     check size of before defining final MQTT topic PATHS
     - maybe define whole topic path and then measure its size


     c_types.h ESP8266

     typedef signed char         sint8_t;
     typedef signed short        sint16_t;
     typedef signed long         sint32_t;
     typedef signed long long    sint64_t;
     typedef unsigned long long  u_int64_t;
     typedef float               real32_t;
     typedef double              real64_t;

     typedef unsigned char       uint8;
     typedef unsigned char       u8;
     typedef signed char         sint8;
     typedef signed char         int8;
     typedef signed char         s8;
     typedef unsigned short      uint16;
     typedef unsigned short      u16;
     typedef signed short        sint16;
     typedef signed short        s16;
     typedef unsigned int        uint32;
     typedef unsigned int        u_int;
     typedef unsigned int        u32;
     typedef signed int          sint32;
     typedef signed int          s32;
     typedef int                 int32;
     typedef signed long long    sint64;
     typedef unsigned long long  uint64;
     typedef unsigned long long  u64;
     typedef float               real32;
     typedef double              real64;

     CircularBuffer

     buffer.unshift() 	- add item to begining
     buffer.push()		- add item to the end

     buffer.shift()		- take item from begining and delete item
     buffer.pop()		- take item from end and delete item

     buffer.first()		- copy first
     buffer.last()		- copy last

     buffer.isEmpty()	- bool
     buffer.isFull()	- bool
     buffer.size()		- how much in buffer right now
     buffer.available()	- how much free
     buffer.capacity()	- total size of buffer (how much can store)
     buffer.clear()		- reset whole buffer

     DEEP_SLEEP

     deep_sleep_set_option(0) The 108th Byte of init parameter decides whether RF calibration will
     be performed after the chip wakes up from Deep-sleep.

     deep_sleep_set_option(1) The chip will make RF calibration after waking up from Deep-sleep.
     Power consumption is high.

     deep_sleep_set_option(2) The chip won’t make RF calibration after waking up from Deep-sleep.
     Power consumption is low.

     deep_sleep_set_option(4) The chip won’t turn on RF after waking up from Deep-sleep. Power
     consumption is the lowest, same as in Modem-sleep
